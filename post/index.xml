<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://shanbozhu.github.io/post/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 17:36:26 +0800</lastBuildDate>
    
	<atom:link href="https://shanbozhu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多bundle组件化工程搭建</title>
      <link>https://shanbozhu.github.io/post/%E5%A4%9Abundle%E7%BB%84%E4%BB%B6%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 23 May 2019 17:36:26 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/%E5%A4%9Abundle%E7%BB%84%E4%BB%B6%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</guid>
      <description>多bundle组件化工程搭建(不依赖摩天轮打包平台)
一、现状
集团内部提供摩天轮打包平台统一打包、部署，每个bundle生成framework的工作都是由平台完成，我们若完全脱离摩天轮平台，怎样利用普通git仓库实现同样功能的多bundle架构呢？下面将要介绍具体操作，虽然功能简陋没有摩天轮强大，但是基本具备多bundle开发能力。
二、原理
多bundle开发可以描述为下图结构，每个bundle单独编译为framework，然后在主工程portal上进行link操作，各bundle只有在个别情况下需要依赖其他bundle，总体来说相互独立，摩天轮做的就是将各bundle后台打包成framework，我们本地通过配置podfile文件使用这些framework。
因此，脱离摩天轮所要做的工作就是：
 能够根据源码打包出framework并部署到pod仓库 能够通过podfile管理这些framework  三、步骤
 本地建立PBAPortal主工程和各业务子bundle  1)建立PBAPortal主工程
2)建立PBHome子工程
 找一个git仓库，我在网上使用了https://coding.net/，实际可以使用内网搭建的git仓库，将建立的工程上传到仓库  1)上传PBAPortal工程
2)上传PBHome子工程
 在git仓库上建立一个PBASpec仓库，用于放置spec文件，该仓库和普通存储工程源码的仓库一样操作即可  最终本地目录如下图</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://shanbozhu.github.io/post/test/</link>
      <pubDate>Wed, 22 May 2019 20:11:49 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mac命令行配置</title>
      <link>https://shanbozhu.github.io/post/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 22 May 2019 11:28:09 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>命令补全   在主目录（~）下，新建名为.inputrc的隐藏文件，末尾输入如下内容
 # 支持模糊搜索和不区分大小写 set show-all-if-ambiguous on set completion-ignore-case on TAB: menu-complete   修改命令行提示符   在主目录（~）下，新建名为.bash_profile的隐藏文件，末尾输入如下内容
 # 命令行提示符 function git_branch { branch=&amp;quot;`git branch 2&amp;gt;/dev/null | grep &amp;quot;^\*&amp;quot; | sed -e &amp;quot;s/^\*\ //&amp;quot;`&amp;quot; if [ &amp;quot;${branch}&amp;quot; != &amp;quot;&amp;quot; ];then if [ &amp;quot;${branch}&amp;quot; = &amp;quot;(no branch)&amp;quot; ];then branch=&amp;quot;(`git rev-parse --short HEAD`...)&amp;quot; fi echo &amp;quot; ($branch)&amp;quot; fi } #export PS1=&#39;\u@\h \[\033[01;36m\]\W\[\033[01;32m\]$(git_branch)\[\033[00m\] \$ &#39; export PS1=&#39;-&amp;gt; \[\033[01;36m\]\W\[\033[01;32m\]$(git_branch)\[\033[00m\] \$ &#39;   别名删除命令进回收站   在主目录（~）下，新建名为.</description>
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>https://shanbozhu.github.io/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 21 May 2019 19:33:39 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>一、常用命令
 表格从上往下依次执行
    操作 命令 备注     克隆远程仓库到本地(下载远程仓库) git clone https://github.com/shanbozhu/shanbozhu.github.io.git    将工作区文件添加到暂存区 git add .    将暂存区文件提交到本地仓库 git commit -m &amp;quot;message&amp;quot;    拉取远程更新到本地 git pull或git pull --rebase --rebase以变基的形式拉取   将本地仓库推送到远程 git push     二、其他命令
   操作 命令 备注     切换分支 git checkout test 如果本地有就切本地，如果本地没有则拉取远程；如果远程有就拉取远程，如果远程没有则拉取失败   新建分支 git branch test 新建分支test   查看本地分支 git branch    查看远程分支 git branch -r    删除本地分支 git branch -D test    将其他分支的提交合并到当前分支 git cherry-pick b041ff5a643b7b1f5c590dc1a368f956ccc3df94 b041ff5a643b7b1f5c590dc1a368f956ccc3df94 为其他分支的一次提交的commit id    </description>
    </item>
    
    <item>
      <title>iOS常用开发工具</title>
      <link>https://shanbozhu.github.io/post/ios%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 21 May 2019 17:31:25 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/ios%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</guid>
      <description>iOS常用开发工具如下：
 开发环境：Xcode Git工具：Sourcetree 抓包工具：Charles 接口请求工具：Postman 数据库工具：DB Browser for SQLite Host切换工具：SwitchHosts!  </description>
    </item>
    
    <item>
      <title>安装CocoaPods</title>
      <link>https://shanbozhu.github.io/post/%E5%AE%89%E8%A3%85cocoapods/</link>
      <pubDate>Tue, 21 May 2019 16:12:56 +0800</pubDate>
      
      <guid>https://shanbozhu.github.io/post/%E5%AE%89%E8%A3%85cocoapods/</guid>
      <description> 更换Ruby镜像源  sudo gem sources --remove https://rubygems.org/
sudo gem sources -a https://gems.ruby-china.org/
 查看当前镜像源  sudo gem sources -l
 安装CocoaPods指定版本  sudo gem install -n /usr/local/bin cocoapods -v 1.2.0
下面步骤处理异常情况，若是本机安装过高版本CocoaPods，使用下面命令降级
 查看CocoaPods版本号  pod --version
 卸载指定版本  sudo gem uninstall cocoapods -v 1.5.0
 使用上面第三步重新安装1.2.0版本Cocoapods  </description>
    </item>
    
  </channel>
</rss>